<?php

namespace App\Infrastructure\Persistence\Repositories;

use App\Domains\{{ domain }}\Repositories\{{ domain }}RepositoryInterface;
use App\Domains\{{ domain }}\Entities\{{ domain }} as Domain{{ domain }};
use App\Models\{{ domain }} as Eloquent{{ domain }};
use Illuminate\Support\Collection;

class Eloquent{{ domain }}Repository implements {{ domain }}RepositoryInterface
{
    /**
     * Return all non-deleted {{ domain }} entities.
     *
     * @return Collection<int, Domain{{ domain }}>
     */
    public function all(): Collection
    {
        return Eloquent{{ domain }}::all()
            ->map(fn (Eloquent{{ domain }} $model) => $this->toDomain($model));
    }

    /**
     * Return all {{ domain }} entities, including trashed ones.
     *
     * @return Collection<int, Domain{{ domain }}>
     */
    public function allWithTrashed(): Collection
    {
        return Eloquent{{ domain }}::withTrashed()->get()
            ->map(fn (Eloquent{{ domain }} $model) => $this->toDomain($model));
    }

    /**
     * Find a {{ domain }} entity by UUID (including trashed).
     *
     * @param  string  $id
     * @return Domain{{ domain }}|null
     */
    public function find(string $id): ?Domain{{ domain }}
    {
        $model = Eloquent{{ domain }}::withTrashed()->find($id);

        return $model ? $this->toDomain($model) : null;
    }

    /**
     * Find a {{ domain }} entity by UUID or fail (including trashed).
     *
     * @param  string  $id
     * @return Domain{{ domain }}
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function findOrFail(string $id): Domain{{ domain }}
    {
        $model = Eloquent{{ domain }}::withTrashed()->findOrFail($id);

        return $this->toDomain($model);
    }

    /**
     * Find a {{ domain }} entity by a given column and value (including trashed).
     *
     * @param  string  $column
     * @param  mixed   $value
     * @return Domain{{ domain }}|null
     */
    public function findBy(string $column, mixed $value): ?Domain{{ domain }}
    {
        $model = Eloquent{{ domain }}::withTrashed()
            ->where($column, $value)
            ->first();

        return $model ? $this->toDomain($model) : null;
    }

    /**
     * Update an existing record or create a new one if none exists (including trashed).
     *
     * @param  array<string, mixed>  $search
     * @param  array<string, mixed>  $additional
     * @return Domain{{ domain }}
     */
    public function updateOrCreate(array $search, array $additional = []): Domain{{ domain }}
    {
        // Using withTrashed() ensures we don't accidentally create a new row if a soft-deleted record exists.
        $model = Eloquent{{ domain }}::withTrashed()
            ->updateOrCreate($search, $additional);

        return $this->toDomain($model);
    }

    /**
     * Create a new {{ domain }} entity from given data.
     *
     * @param  array<string, mixed>  $data
     * @return Domain{{ domain }}
     */
    public function create(array $data): Domain{{ domain }}
    {
        $model = Eloquent{{ domain }}::create($data);

        return $this->toDomain($model);
    }

    /**
     * Update an existing {{ domain }} entity by UUID with given data (including trashed).
     *
     * @param  string  $id
     * @param  array<string, mixed>  $data
     * @return Domain{{ domain }}|null
     */
    public function update(string $id, array $data): ?Domain{{ domain }}
    {
        $model = Eloquent{{ domain }}::withTrashed()->find($id);

        if (!$model) {
            return null;
        }

        $model->update($data);

        return $this->toDomain($model);
    }

    /**
     * Soft-delete a {{ domain }} entity by UUID.
     *
     * @param  string  $id
     * @return bool  True if deleted, otherwise false.
     */
    public function delete(string $id): bool
    {
        $model = Eloquent{{ domain }}::withTrashed()->find($id);

        if (!$model || $model->trashed()) {
            return false;
        }

        return (bool) $model->delete();
    }

    /**
     * Restore a soft-deleted {{ domain }} entity.
     *
     * @param  string  $id
     * @return bool True if restored, otherwise false.
     */
    public function restore(string $id): bool
    {
        $model = Eloquent{{ domain }}::withTrashed()->find($id);

        if (!$model || !$model->trashed()) {
            return false;
        }

        return (bool) $model->restore();
    }

    /**
     * Permanently delete a {{ domain }} entity (force delete).
     *
     * @param  string  $id
     * @return bool True if force-deleted, otherwise false.
     */
    public function forceDelete(string $id): bool
    {
        $model = Eloquent{{ domain }}::withTrashed()->find($id);

        if (!$model) {
            return false;
        }

        return (bool) $model->forceDelete();
    }

    /**
     * Convert an Eloquent model to a domain entity.
     *
     * @param  Eloquent{{ domain }}  $model
     * @return Domain{{ domain }}
     */
    protected function toDomain(Eloquent{{ domain }} $model): Domain{{ domain }}
    {
        return new Domain{{ domain }}(
            $model->id,
            $model->name,
            $model->slug
        );
    }
}
