<?php

namespace App\Infrastructure\Persistence\Repositories;

use {{ domainNamespace }}\Repositories\{{ domain }}RepositoryInterface;
use {{ domainNamespace }}\Entities\{{ domain }} as {{ domain }}Entity;
use App\Models\{{ domain }} as {{ domain }};
use Illuminate\Support\Collection;

class {{ domain }}Repository implements {{ domain }}RepositoryInterface
{
    /**
     * Return all {{ domain }} entities.
     *
     * @return Collection<int, {{ domain }}Entity}>
     */
    public function all(): Collection
    {
        return {{ domain }}::all()
            ->map(fn ({{ domain }} $model) => $this->toDomain($model));
    }

    /**
     * Find a {{ domain }} entity by UUID.
     *
     * @param  string  $id
     * @return {{ domain }}Entity}|null
     */
    public function find(string $id): ?{{ domain }}Entity}
    {
        $model = {{ domain }}::find($id);

        return $model ? $this->toDomain($model) : null;
    }

    /**
     * Find a {{ domain }} entity by UUID or fail.
     *
     * @param  string  $id
     * @return {{ domain }}Entity}
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function findOrFail(string $id): {{ domain }}Entity}
    {
        $model = {{ domain }}::findOrFail($id);

        return $this->toDomain($model);
    }

    /**
     * Find a {{ domain }} entity by a given column and value.
     *
     * @param  string  $column
     * @param  mixed   $value
     * @return {{ domain }}Entity}|null
     */
    public function findBy(string $column, mixed $value): ?{{ domain }}Entity}
    {
        $model = {{ domain }}::where($column, $value)->first();

        return $model ? $this->toDomain($model) : null;
    }

    /**
     * Update an existing record or create a new one if none exists.
     *
     * @param  array<string, mixed>  $search
     * @param  array<string, mixed>  $additional
     * @return {{ domain }}Entity}
     */
    public function updateOrCreate(array $search, array $additional = []): {{ domain }}Entity}
    {
        $model = {{ domain }}::updateOrCreate($search, $additional);

        return $this->toDomain($model);
    }

    /**
     * Create a new {{ domain }} entity from given data.
     *
     * @param  array<string, mixed>  $data
     * @return {{ domain }}Entity}
     */
    public function create(array $data): {{ domain }}Entity}
    {
        $model = {{ domain }}::create($data);

        return $this->toDomain($model);
    }

    /**
     * Update an existing {{ domain }} entity by UUID with given data.
     *
     * @param  string  $id
     * @param  array<string, mixed>  $data
     * @return {{ domain }}Entity}|null
     */
    public function update(string $id, array $data): ?{{ domain }}Entity}
    {
        $model = {{ domain }}::find($id);

        if (!$model) {
            return null;
        }

        $model->update($data);

        return $this->toDomain($model);
    }

    /**
     * Delete a {{ domain }} entity by UUID.
     *
     * @param  string  $id
     * @return bool  True if deleted, otherwise false.
     */
    public function delete(string $id): bool
    {
        $model = {{ domain }}::find($id);

        if (!$model) {
            return false;
        }

        return (bool) $model->delete();
    }

    /**
     * Convert an Eloquent model to a domain entity.
     *
     * @param  {{ domain }}  $model
     * @return {{ domain }}Entity}
     */
    protected function toDomain({{ domain }} $model): {{ domain }}Entity}
    {
        // Map Eloquent model fields to domain entity constructor.
        // Adjust as needed for your domain entity's fields.
        return new {{ domain }}Entity}(
            $model->id,
            $model->name,
            $model->slug
        );
    }
}
