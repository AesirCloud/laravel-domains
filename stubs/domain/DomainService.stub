<?php

namespace {{ domainNamespace }}\DomainServices;

use {{ domainNamespace }}\Repositories\{{ domain }}RepositoryInterface;
use {{ domainNamespace }}\DataTransferObjects\{{ domain }}Data;
use {{ domainNamespace }}\Entities\{{ domain }};

class {{ domain }}Service
{
    protected {{ domain }}RepositoryInterface $repository;

    public function __construct({{ domain }}RepositoryInterface $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Create a new {{ domain }}.
     */
    public function create({{ domain }}Data $dto): {{ domain }}
    {
        return $this->repository->create($dto->toArray());
    }

    /**
     * Update an existing {{ domain }}.
     */
    public function update(string $id, {{ domain }}Data $dto): {{ domain }}
    {
        return $this->repository->update($id, $dto->toArray());
    }

    /**
     * Delete a {{ domain }}.
     */
    public function delete(string $id): void
    {
        $this->repository->delete($id);
    }

    /**
     * Restore a soft-deleted {{ domain }}.
     */
    public function restore(string $id): void
    {
        $this->repository->restore($id);
    }

    /**
     * Force-delete a soft-deleted {{ domain }}.
     */
    public function forceDelete(string $id): void
    {
        $this->repository->forceDelete($id);
    }

    /**
     * Index all
     */
    public function index(): array
    {
        return $this->repository->all()->all();
    }

    /**
     * Show a single entity
     */
    public function show(string $id): ?{{ domain }}
    {
        return $this->repository->find($id);
    }
}
