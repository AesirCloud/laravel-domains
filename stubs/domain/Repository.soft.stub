<?php

namespace App\Domains\{{ domain }}\Repositories;

use App\Domains\{{ domain }}\Entities\{{ domain }} as Domain{{ domain }};
use Illuminate\Support\Collection;

interface {{ domain }}RepositoryInterface
{
    /**
     * Get all non-deleted {{ domain }} entities.
     *
     * @return Collection<int, Domain{{ domain }}>
     */
    public function all(): Collection;

    /**
     * Get all {{ domain }} entities, including trashed.
     *
     * @return Collection<int, Domain{{ domain }}>
     */
    public function allWithTrashed(): Collection;

    /**
     * Find a {{ domain }} entity by UUID (including trashed) or return null.
     *
     * @param  string  $id
     * @return Domain{{ domain }}|null
     */
    public function find(string $id): ?Domain{{ domain }};

    /**
     * Find a {{ domain }} entity by UUID or fail (including trashed).
     *
     * @param  string  $id
     * @return Domain{{ domain }}
     */
    public function findOrFail(string $id): Domain{{ domain }};

    /**
     * Find a {{ domain }} entity by a given column and value (including trashed) or return null.
     *
     * @param  string  $column
     * @param  mixed   $value
     * @return Domain{{ domain }}|null
     */
    public function findBy(string $column, mixed $value): ?Domain{{ domain }};

    /**
     * Update an existing record or create a new one if none exists (including trashed).
     *
     * @param  array<string, mixed>  $search
     * @param  array<string, mixed>  $additional
     * @return Domain{{ domain }}
     */
    public function updateOrCreate(array $search, array $additional = []): Domain{{ domain }};

    /**
     * Create a new {{ domain }} entity from given data.
     *
     * @param  array<string, mixed>  $data
     * @return Domain{{ domain }}
     */
    public function create(array $data): Domain{{ domain }};

    /**
     * Update an existing {{ domain }} entity by UUID with given data (including trashed).
     *
     * @param  string  $id
     * @param  array<string, mixed>  $data
     * @return Domain{{ domain }}|null
     */
    public function update(string $id, array $data): ?Domain{{ domain }};

    /**
     * Soft-delete a {{ domain }} entity by UUID.
     *
     * @param  string  $id
     * @return bool  True if deleted, otherwise false.
     */
    public function delete(string $id): bool;

    /**
     * Restore a soft-deleted {{ domain }} entity.
     *
     * @param  string  $id
     * @return bool True if restored, otherwise false.
     */
    public function restore(string $id): bool;

    /**
     * Permanently delete a {{ domain }} entity by UUID (force delete).
     *
     * @param  string  $id
     * @return bool True if force-deleted, otherwise false.
     */
    public function forceDelete(string $id): bool;
}
